// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"access/internal/biz"
	"access/internal/conf"
	"access/internal/data"
	"access/internal/server"
	"access/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger, serverInstance *conf.ServerInstance) (*kratos.App, func(), error) {
	consumer := biz.NewConsumer()
	dataData, cleanup, err := data.NewData(bootstrap, logger)
	if err != nil {
		return nil, nil, err
	}
	sessionRepo := data.NewSessionRepo(dataData, logger)
	manager, cleanup2 := biz.NewManager(logger, sessionRepo)
	accessService := service.NewAccessService(logger, consumer, manager, serverInstance)
	grpcServer := server.NewGRPCServer(bootstrap, accessService, logger)
	httpServer := server.NewHTTPServer(bootstrap, accessService, logger)
	client, err := data.NewEtcdClient(bootstrap)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	registrar := data.NewRegistry(client)
	app := newApp(logger, grpcServer, httpServer, registrar)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
