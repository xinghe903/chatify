syntax = "proto3";

package access.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "api/access/v1;v1";



// AccessService 提供内部服务间通信接口
service AccessService {
  // 下行消息推送（从PushService到客户端）- 单推
  rpc PushToClient(PushRequest) returns (PushResponse);
  
  // 检查客户端连接状态
  rpc CheckClientConnection(ConnectionCheckRequest) returns (ConnectionCheckResponse);
}

// 下行消息推送请求（单推）
message PushRequest {
  repeated string user_ids = 1;       // 目标客户端ID
  bytes payload = 2;          // 消息体（已编码的协议数据）
  int32 priority = 3;         // 消息优先级（0-9）
  int64 expire_time = 4;      // 过期时间戳（0表示不过期）
  string message_id = 5;      // 消息ID（用于去重和ACK）
}

message PushResponse {
  bool success = 1;
  enum ErrorCode {
    SUCCESS = 0;
    CLIENT_OFFLINE = 1;
    CONNECTION_BUSY = 2;
    INVALID_CLIENT = 3;
    INTERNAL_ERROR = 4;
  }
  ErrorCode error_code = 2;
  string error_msg = 3;
}

// 批量推送请求
message BatchPushRequest {
  repeated PushRequest pushes = 1;
  bool atomic = 2; // 是否原子操作（全部成功或全部失败）
}

message BatchPushResponse {
  repeated PushResponse results = 1;
  int32 success_count = 2;
  int32 failure_count = 3;
}

// 广播请求（发送给所有连接到此节点的客户端）
message BroadcastRequest {
  bytes payload = 1;          // 消息体
  string exclude_client_id = 2; // 排除的客户端ID（可选）
  int32 priority = 3;         // 消息优先级
}

message BroadcastResponse {
  int32 success_count = 1;    // 成功推送的客户端数量
  int32 failure_count = 2;    // 推送失败的客户端数量
}

// 连接检查请求
message ConnectionCheckRequest {
  repeated string client_ids = 1;
}

message ConnectionCheckResponse {
  message ConnectionStatus {
    string client_id = 1;
    bool is_online = 2;
    int64 last_active_time = 3; // 最后活动时间戳
  }
  repeated ConnectionStatus statuses = 1;
}



// 客户端到Access Service的消息格式（通过WebSocket/TCP/二进制协议）
message ClientToAccessMessage {
  string message_id = 1;      // 消息ID（客户端生成，用于去重和ACK）
  MessageType type = 2;       // 消息类型
  bytes payload = 3;          // 消息内容
  int64 timestamp = 4;        // 客户端时间戳
  string version = 5;         // 协议版本
  
  enum MessageType {
    AUTH = 0;           // 认证请求
    HEARTBEAT = 1;      // 心跳
    CHAT = 2;           // 聊天消息
    ACK = 3;            // 确认收到服务端消息
    PRESENCE = 4;       // 在线状态更新
    TYPING = 5;         // 输入状态指示
    READ_RECEIPT = 6;   // 已读回执
  }
}

// Access Service到客户端的消息格式
message AccessToClientMessage {
  string message_id = 1;      // 消息ID（服务端生成）
  MessageType type = 2;       // 消息类型
  bytes payload = 3;          // 消息内容
  int64 timestamp = 4;        // 服务端时间戳
  string ref_message_id = 5;  // 引用的消息ID（用于ACK、回复等）
  Status status = 6;          // 状态码
  
  enum MessageType {
    AUTH_RESP = 0;      // 认证响应
    HEARTBEAT_RESP = 1; // 心跳响应
    CHAT = 2;           // 聊天消息
    ACK = 3;            // 确认收到客户端消息
    NOTIFICATION = 4;   // 通知
    ERROR = 5;          // 错误
    KICK = 6;           // 踢出通知
  }
  
  enum Status {
    SUCCESS = 0;
    FAILURE = 1;
    INVALID_TOKEN = 2;
    RATE_LIMITED = 3;
    SERVER_ERROR = 4;
  }
}

// 认证请求
message AuthRequest {
  string token = 1;           // 认证令牌
  string device_id = 2;       // 设备ID
  string app_version = 3;     // 应用版本
  string platform = 4;        // 平台（iOS/Android/Web等）
}

// 认证响应
message AuthResponse {
  bool success = 1;
  string user_id = 2;
  string error_msg = 3;
  int32 heartbeat_interval = 4; // 建议的心跳间隔（秒）
  int64 server_time = 5;        // 服务器时间（用于时间同步）
}

// 心跳消息
message Heartbeat {
  int64 client_time = 1;
}

// 心跳响应
message HeartbeatResponse {
  int64 server_time = 1;        // 服务器时间
  int32 suggested_interval = 2; // 建议的心跳间隔（智能调整）
}

// 聊天消息
message ChatMessage {
  string to = 1;                // 接收方ID（用户/群组）
  bytes content = 2;            // 消息内容
  string content_type = 3;      // 内容类型（text/json/image等）
  map<string, string> extras = 4; // 扩展字段
}

// 消息ACK
message MessageAck {
  string message_id = 1;        // 被确认的消息ID
  bool success = 2;             // 是否成功处理
}

// 错误消息
message ErrorMessage {
  string code = 1;              // 错误代码
  string message = 2;           // 错误描述
  string details = 3;           // 错误详情
}

// 踢出通知
message KickNotification {
  enum Reason {
    DUPLICATE_LOGIN = 0;    // 重复登录
    ADMIN_KICK = 1;         // 管理员踢出
    SERVER_SHUTDOWN = 2;    // 服务器关闭
    SESSION_EXPIRED = 3;    // 会话过期
  }
  Reason reason = 1;
  string message = 2;
}


