upstream auth_service {
    server 192.168.1.100:8080;
}

upstream normal_backend {
    hash $http_X_User_ID consistent;
    server 192.168.1.100:8081;
}

upstream vip_backend {
    server 192.168.1.100:8091;
}

server {
    listen 80;
    server_name _;

    # location 1: 处理 /chatify/auth/ 下的所有请求 → 直接转发给 auth_service
    # 使用 ^~ 修饰符：前缀匹配且优先于正则，不走 auth_request
    location ^~ /chatify/auth/ {
        proxy_pass http://auth_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # location 2: 处理其他 /chatify/ 请求（非 /chatify/auth/）
    # 必须放在 /chatify/auth/ 之后，确保更长的前缀优先匹配
    location /chatify/ {
        # 认证检查：调用认证服务验证 token
        auth_request /chatify/internal/auth/verify;

        # 获取认证服务返回的用户信息
        auth_request_set $user_id $upstream_http_x_user_id;
        auth_request_set $is_vip $upstream_http_x_user_vip;
        auth_request_set $user_name $upstream_http_x_user_name;
        # 捕获认证失败时的错误信息
        auth_request_set $auth_error $upstream_http_x_auth_error;

        # 根据 VIP 状态选择后端
        set $backend_group normal_backend;
        if ($is_vip = "true") {
            set $backend_group vip_backend;
        }

        proxy_pass http://$backend_group;
        proxy_set_header X-User-Id $user_id;
        proxy_set_header X-Is-VIP $is_vip;
        proxy_set_header X-User-Name $user_name;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # --- WebSocket 支持 ---
        # 这两个头是“条件性”生效的：
        # - 如果客户端发了 Upgrade，则 Nginx 会升级协议
        # - 如果没发，则当作普通 HTTP 转发
        proxy_set_header Upgrade $http_upgrade;      # 透传 Upgrade 头
        proxy_set_header Connection "upgrade";       # 告诉后端准备升级

        # 👇 关键：拦截 auth_request 失败时的错误，交由自定义 location 处理
        error_page 401 = @return_auth_error;
    }

    # 子请求：用于 auth_request 的认证验证（内部使用）
    location = /chatify/internal/auth/verify {
        internal;
        proxy_pass http://auth_service/chatify/auth/v1/verifyToken;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header access-token $http_access_token;

        # 👇 允许 Nginx 接收认证服务返回的响应头
        proxy_intercept_errors on;
        # 如果认证服务返回 401/403/5xx，Nginx 仍会接收响应体，而不是直接报错
        
        proxy_connect_timeout 2s;
        proxy_read_timeout 3s;
    }

    # 返回认证错误信息（不重新调用接口）
    location @return_auth_error {
        internal;

        # 使用 auth_request_set 捕获的错误信息
        add_header Content-Type 'application/json; charset=utf-8' always;
        return 401 '{"code":401,"message":"Invalid or expired access token"}';
    }
}
