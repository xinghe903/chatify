syntax = "proto3";

package offline.v1;

import "im/v1/message.proto";
import "google/api/annotations.proto";

option go_package = "api/offline/v1;v1";


service OfflineService {
  // 主动拉取离线消息（用户上线时）
  rpc RetrieveOfflineMessages(RetrieveRequest) returns (RetrieveResponse)  {
    option (google.api.http) = {
      get: "/chatify/offline/v1/RetrieveOfflineMessages",
    };
  };
  // 确认一批消息已送达（由 Push 调用）
  rpc AcknowledgeMessages(AckRequest) returns (AckResponse)  {
    option (google.api.http) = {
      post: "/chatify/offline/v1/AcknowledgeMessages",
      body: "*",
    };
  };

  // 归档一批离线消息
  rpc ArchiveMessages(ArchiveRequest) returns (ArchiveResponse)  {
    option (google.api.http) = {
      post: "/chatify/offline/v1/ArchiveMessages",
      body: "*",
    };
  };
}

message RetrieveRequest {
  string user_id = 1;
  string last_message_id = 2;   // 最后一个消息的id, 默认为0
}


message RetrieveResponse {
  enum Code {
    UNSUPPORTED = 0;
    OK = 1;
    FAILED_INVALID_USER = 2;
  }
  Code code = 1;
  repeated im.v1.BaseMessage message = 2;   // max size: 1000
}

message AckRequest {
  string user_id = 1;
  repeated string message_ids = 2;
}

message AckResponse {
  enum Code {
    UNSUPPORTED = 0;
    OK = 1;
    FAILED_INVALID_USER = 2;
  }
  Code code = 1;
  string message = 2;
}


message ArchiveRequest {
  string task_id = 1;
  repeated im.v1.BaseMessage message = 2;   // max size: 1000
}

message ArchiveResponse {
  enum Code {
    OK = 0;
    TOO_MANY_MESSAGE = 1;
  }
  Code code = 1;
  string message = 2;
}
